name: Test NimPlant builds

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-nimplant:
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code into workspace directory
        uses: actions/checkout@v3

      - name: Build Docker container
        run: docker build . -t nimplant
        shell: bash

      - name: Copy example configuration
        run: cp config.toml.example config.toml
        shell: bash

      - name: Compile Nim binaries using Docker
        run: docker run -v ${PWD}:/nimplant nimplant /bin/bash -c "python ./nimplant.py compile all nim"
        shell: bash

      - name: Compile Rust binaries using Docker
        run: docker run -v ${PWD}:/nimplant nimplant /bin/bash -c "python ./nimplant.py compile all rust"
        shell: bash

      - name: Check if all files compiled correctly
        uses: andstor/file-existence-action@v2
        with:
          fail: true
          files: |
            ./client/bin/NimPlant.bin,
            ./client/bin/NimPlant.dll,
            ./client/bin/NimPlant.exe,
            ./client/bin/NimPlant-selfdelete.exe,
            ./client-rs/bin/nimplant.exe,
            ./client-rs/bin/nimplant.dll,
            ./client-rs/bin/nimplant.bin,
            ./client-rs/bin/nimplant-selfdelete.exe

      - name: Install yara and scan the Rust artefact
        run: |
          docker run -v ${PWD}:/nimplant nimplant /bin/bash -c "\
          apt-get update >/dev/null && \
          apt-get install -y yara >/dev/null && \
          yara -s detection/strings_test.yar client-rs/bin/nimplant.exe" \
          | tee /dev/tty \
          | grep -q '0x' && \
            echo "Yara scan found matches on Rust artifact, failing the build." && \
            exit 1 || \
            echo "Yara scan did not find any matches."
        shell: bash